// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/decklog.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DecklogService_StreamEvents_FullMethodName       = "/decklog.DecklogService/StreamEvents"
	DecklogService_SendBalancingEvent_FullMethodName = "/decklog.DecklogService/SendBalancingEvent"
	DecklogService_CheckHealth_FullMethodName        = "/decklog.DecklogService/CheckHealth"
)

// DecklogServiceClient is the client API for DecklogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DecklogServiceClient interface {
	// Stream events from Helmsman (high throughput)
	StreamEvents(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Event, EventResponse], error)
	// Single event from Foghorn (load balancing decisions)
	SendBalancingEvent(ctx context.Context, in *BalancingEvent, opts ...grpc.CallOption) (*EventResponse, error)
	// Health check
	CheckHealth(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error)
}

type decklogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDecklogServiceClient(cc grpc.ClientConnInterface) DecklogServiceClient {
	return &decklogServiceClient{cc}
}

func (c *decklogServiceClient) StreamEvents(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Event, EventResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DecklogService_ServiceDesc.Streams[0], DecklogService_StreamEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Event, EventResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DecklogService_StreamEventsClient = grpc.BidiStreamingClient[Event, EventResponse]

func (c *decklogServiceClient) SendBalancingEvent(ctx context.Context, in *BalancingEvent, opts ...grpc.CallOption) (*EventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EventResponse)
	err := c.cc.Invoke(ctx, DecklogService_SendBalancingEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *decklogServiceClient) CheckHealth(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, DecklogService_CheckHealth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DecklogServiceServer is the server API for DecklogService service.
// All implementations must embed UnimplementedDecklogServiceServer
// for forward compatibility.
type DecklogServiceServer interface {
	// Stream events from Helmsman (high throughput)
	StreamEvents(grpc.BidiStreamingServer[Event, EventResponse]) error
	// Single event from Foghorn (load balancing decisions)
	SendBalancingEvent(context.Context, *BalancingEvent) (*EventResponse, error)
	// Health check
	CheckHealth(context.Context, *HealthRequest) (*HealthResponse, error)
	mustEmbedUnimplementedDecklogServiceServer()
}

// UnimplementedDecklogServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDecklogServiceServer struct{}

func (UnimplementedDecklogServiceServer) StreamEvents(grpc.BidiStreamingServer[Event, EventResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamEvents not implemented")
}
func (UnimplementedDecklogServiceServer) SendBalancingEvent(context.Context, *BalancingEvent) (*EventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendBalancingEvent not implemented")
}
func (UnimplementedDecklogServiceServer) CheckHealth(context.Context, *HealthRequest) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckHealth not implemented")
}
func (UnimplementedDecklogServiceServer) mustEmbedUnimplementedDecklogServiceServer() {}
func (UnimplementedDecklogServiceServer) testEmbeddedByValue()                        {}

// UnsafeDecklogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DecklogServiceServer will
// result in compilation errors.
type UnsafeDecklogServiceServer interface {
	mustEmbedUnimplementedDecklogServiceServer()
}

func RegisterDecklogServiceServer(s grpc.ServiceRegistrar, srv DecklogServiceServer) {
	// If the following call pancis, it indicates UnimplementedDecklogServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DecklogService_ServiceDesc, srv)
}

func _DecklogService_StreamEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DecklogServiceServer).StreamEvents(&grpc.GenericServerStream[Event, EventResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DecklogService_StreamEventsServer = grpc.BidiStreamingServer[Event, EventResponse]

func _DecklogService_SendBalancingEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BalancingEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DecklogServiceServer).SendBalancingEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DecklogService_SendBalancingEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DecklogServiceServer).SendBalancingEvent(ctx, req.(*BalancingEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _DecklogService_CheckHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DecklogServiceServer).CheckHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DecklogService_CheckHealth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DecklogServiceServer).CheckHealth(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DecklogService_ServiceDesc is the grpc.ServiceDesc for DecklogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DecklogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "decklog.DecklogService",
	HandlerType: (*DecklogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendBalancingEvent",
			Handler:    _DecklogService_SendBalancingEvent_Handler,
		},
		{
			MethodName: "CheckHealth",
			Handler:    _DecklogService_CheckHealth_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamEvents",
			Handler:       _DecklogService_StreamEvents_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/decklog.proto",
}
