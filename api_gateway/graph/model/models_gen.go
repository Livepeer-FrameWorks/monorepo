// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
	"time"
)

type TenantEvent interface {
	IsTenantEvent()
}

type Clip struct {
	ID          string    `json:"id"`
	StreamID    string    `json:"streamId"`
	TenantID    string    `json:"tenantId"`
	Title       string    `json:"title"`
	Description *string   `json:"description,omitempty"`
	StartTime   int       `json:"startTime"`
	EndTime     int       `json:"endTime"`
	Duration    int       `json:"duration"`
	PlaybackID  string    `json:"playbackId"`
	Status      string    `json:"status"`
	CreatedAt   time.Time `json:"createdAt"`
	UpdatedAt   time.Time `json:"updatedAt"`
}

type Cluster struct {
	ID        string     `json:"id"`
	Name      string     `json:"name"`
	Region    string     `json:"region"`
	Status    NodeStatus `json:"status"`
	Nodes     []*Node    `json:"nodes"`
	CreatedAt time.Time  `json:"createdAt"`
}

type CreateClipInput struct {
	StreamID    string  `json:"streamId"`
	StartTime   int     `json:"startTime"`
	EndTime     int     `json:"endTime"`
	Title       string  `json:"title"`
	Description *string `json:"description,omitempty"`
}

type CreateDeveloperTokenInput struct {
	Name        string  `json:"name"`
	Permissions *string `json:"permissions,omitempty"`
	ExpiresIn   *int    `json:"expiresIn,omitempty"`
}

type CreatePaymentInput struct {
	Amount   float64       `json:"amount"`
	Currency *string       `json:"currency,omitempty"`
	Method   PaymentMethod `json:"method"`
}

type CreateStreamInput struct {
	Name        string  `json:"name"`
	Description *string `json:"description,omitempty"`
	Record      *bool   `json:"record,omitempty"`
}

type DeveloperToken struct {
	ID          string     `json:"id"`
	Name        string     `json:"name"`
	Token       *string    `json:"token,omitempty"`
	Permissions string     `json:"permissions"`
	Status      string     `json:"status"`
	LastUsedAt  *time.Time `json:"lastUsedAt,omitempty"`
	ExpiresAt   *time.Time `json:"expiresAt,omitempty"`
	CreatedAt   time.Time  `json:"createdAt"`
}

type LineItem struct {
	Description string  `json:"description"`
	Quantity    int     `json:"quantity"`
	UnitPrice   float64 `json:"unitPrice"`
	Total       float64 `json:"total"`
}

type Mutation struct {
}

type Node struct {
	ID        string     `json:"id"`
	Name      string     `json:"name"`
	ClusterID string     `json:"clusterId"`
	Type      string     `json:"type"`
	Status    NodeStatus `json:"status"`
	Region    string     `json:"region"`
	IPAddress *string    `json:"ipAddress,omitempty"`
	LastSeen  time.Time  `json:"lastSeen"`
	CreatedAt time.Time  `json:"createdAt"`
}

type PlatformOverview struct {
	TotalStreams   int        `json:"totalStreams"`
	TotalViewers   int        `json:"totalViewers"`
	TotalBandwidth float64    `json:"totalBandwidth"`
	TotalUsers     int        `json:"totalUsers"`
	TimeRange      *TimeRange `json:"timeRange"`
}

type Query struct {
}

type StreamEmbed struct {
	StreamID  string `json:"streamId"`
	EmbedCode string `json:"embedCode"`
	IframeURL string `json:"iframeUrl"`
	Width     int    `json:"width"`
	Height    int    `json:"height"`
}

type StreamEvent struct {
	Type      StreamEventType `json:"type"`
	StreamID  string          `json:"streamId"`
	TenantID  string          `json:"tenantId"`
	Status    StreamStatus    `json:"status"`
	Timestamp time.Time       `json:"timestamp"`
	NodeID    *string         `json:"nodeId,omitempty"`
	Details   *string         `json:"details,omitempty"`
}

func (StreamEvent) IsTenantEvent() {}

type StreamValidation struct {
	Valid     bool    `json:"valid"`
	StreamKey string  `json:"streamKey"`
	Error     *string `json:"error,omitempty"`
	TenantID  *string `json:"tenantId,omitempty"`
}

type Subscription struct {
}

type SystemHealthEvent struct {
	NodeID      string     `json:"nodeId"`
	ClusterID   string     `json:"clusterId"`
	Status      NodeStatus `json:"status"`
	CPUUsage    float64    `json:"cpuUsage"`
	MemoryUsage float64    `json:"memoryUsage"`
	DiskUsage   float64    `json:"diskUsage"`
	HealthScore float64    `json:"healthScore"`
	Timestamp   time.Time  `json:"timestamp"`
}

type TimeRange struct {
	Start time.Time `json:"start"`
	End   time.Time `json:"end"`
}

type TimeRangeInput struct {
	Start time.Time `json:"start"`
	End   time.Time `json:"end"`
}

type TrackListEvent struct {
	StreamID   string    `json:"streamId"`
	TenantID   string    `json:"tenantId"`
	TrackList  string    `json:"trackList"`
	TrackCount int       `json:"trackCount"`
	Timestamp  time.Time `json:"timestamp"`
}

func (TrackListEvent) IsTenantEvent() {}

type UpdateStreamInput struct {
	Name        *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
	Record      *bool   `json:"record,omitempty"`
}

type UpdateTenantInput struct {
	Name     *string `json:"name,omitempty"`
	Settings *string `json:"settings,omitempty"`
}

type ViewerMetric struct {
	Timestamp   time.Time `json:"timestamp"`
	ViewerCount int       `json:"viewerCount"`
}

type ViewerMetrics struct {
	StreamID          string    `json:"streamId"`
	CurrentViewers    int       `json:"currentViewers"`
	PeakViewers       int       `json:"peakViewers"`
	Bandwidth         float64   `json:"bandwidth"`
	ConnectionQuality *float64  `json:"connectionQuality,omitempty"`
	BufferHealth      *float64  `json:"bufferHealth,omitempty"`
	Timestamp         time.Time `json:"timestamp"`
}

func (ViewerMetrics) IsTenantEvent() {}

type NodeStatus string

const (
	NodeStatusHealthy   NodeStatus = "HEALTHY"
	NodeStatusDegraded  NodeStatus = "DEGRADED"
	NodeStatusUnhealthy NodeStatus = "UNHEALTHY"
)

var AllNodeStatus = []NodeStatus{
	NodeStatusHealthy,
	NodeStatusDegraded,
	NodeStatusUnhealthy,
}

func (e NodeStatus) IsValid() bool {
	switch e {
	case NodeStatusHealthy, NodeStatusDegraded, NodeStatusUnhealthy:
		return true
	}
	return false
}

func (e NodeStatus) String() string {
	return string(e)
}

func (e *NodeStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = NodeStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid NodeStatus", str)
	}
	return nil
}

func (e NodeStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *NodeStatus) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e NodeStatus) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type PaymentMethod string

const (
	PaymentMethodCard         PaymentMethod = "CARD"
	PaymentMethodCrypto       PaymentMethod = "CRYPTO"
	PaymentMethodBankTransfer PaymentMethod = "BANK_TRANSFER"
)

var AllPaymentMethod = []PaymentMethod{
	PaymentMethodCard,
	PaymentMethodCrypto,
	PaymentMethodBankTransfer,
}

func (e PaymentMethod) IsValid() bool {
	switch e {
	case PaymentMethodCard, PaymentMethodCrypto, PaymentMethodBankTransfer:
		return true
	}
	return false
}

func (e PaymentMethod) String() string {
	return string(e)
}

func (e *PaymentMethod) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PaymentMethod(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PaymentMethod", str)
	}
	return nil
}

func (e PaymentMethod) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *PaymentMethod) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e PaymentMethod) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type StreamEventType string

const (
	StreamEventTypeStreamStart     StreamEventType = "STREAM_START"
	StreamEventTypeStreamEnd       StreamEventType = "STREAM_END"
	StreamEventTypeStreamError     StreamEventType = "STREAM_ERROR"
	StreamEventTypeBufferUpdate    StreamEventType = "BUFFER_UPDATE"
	StreamEventTypeTrackListUpdate StreamEventType = "TRACK_LIST_UPDATE"
)

var AllStreamEventType = []StreamEventType{
	StreamEventTypeStreamStart,
	StreamEventTypeStreamEnd,
	StreamEventTypeStreamError,
	StreamEventTypeBufferUpdate,
	StreamEventTypeTrackListUpdate,
}

func (e StreamEventType) IsValid() bool {
	switch e {
	case StreamEventTypeStreamStart, StreamEventTypeStreamEnd, StreamEventTypeStreamError, StreamEventTypeBufferUpdate, StreamEventTypeTrackListUpdate:
		return true
	}
	return false
}

func (e StreamEventType) String() string {
	return string(e)
}

func (e *StreamEventType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = StreamEventType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid StreamEventType", str)
	}
	return nil
}

func (e StreamEventType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *StreamEventType) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e StreamEventType) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type StreamStatus string

const (
	StreamStatusOffline   StreamStatus = "OFFLINE"
	StreamStatusLive      StreamStatus = "LIVE"
	StreamStatusRecording StreamStatus = "RECORDING"
	StreamStatusEnded     StreamStatus = "ENDED"
)

var AllStreamStatus = []StreamStatus{
	StreamStatusOffline,
	StreamStatusLive,
	StreamStatusRecording,
	StreamStatusEnded,
}

func (e StreamStatus) IsValid() bool {
	switch e {
	case StreamStatusOffline, StreamStatusLive, StreamStatusRecording, StreamStatusEnded:
		return true
	}
	return false
}

func (e StreamStatus) String() string {
	return string(e)
}

func (e *StreamStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = StreamStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid StreamStatus", str)
	}
	return nil
}

func (e StreamStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *StreamStatus) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e StreamStatus) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
