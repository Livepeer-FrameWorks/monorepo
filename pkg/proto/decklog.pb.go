// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: decklog.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EventType int32

const (
	EventType_EVENT_TYPE_UNSPECIFIED         EventType = 0
	EventType_EVENT_TYPE_STREAM_INGEST       EventType = 1
	EventType_EVENT_TYPE_STREAM_VIEW         EventType = 2
	EventType_EVENT_TYPE_STREAM_LIFECYCLE    EventType = 3
	EventType_EVENT_TYPE_USER_CONNECTION     EventType = 4
	EventType_EVENT_TYPE_PUSH_LIFECYCLE      EventType = 5
	EventType_EVENT_TYPE_RECORDING_LIFECYCLE EventType = 6
	EventType_EVENT_TYPE_CLIENT_LIFECYCLE    EventType = 7
	EventType_EVENT_TYPE_NODE_LIFECYCLE      EventType = 8
	EventType_EVENT_TYPE_LOAD_BALANCING      EventType = 9
	EventType_EVENT_TYPE_TRACK_LIST          EventType = 10
	EventType_EVENT_TYPE_STREAM_BUFFER       EventType = 11
	EventType_EVENT_TYPE_STREAM_END          EventType = 12
	EventType_EVENT_TYPE_BANDWIDTH_THRESHOLD EventType = 13
)

// Enum value maps for EventType.
var (
	EventType_name = map[int32]string{
		0:  "EVENT_TYPE_UNSPECIFIED",
		1:  "EVENT_TYPE_STREAM_INGEST",
		2:  "EVENT_TYPE_STREAM_VIEW",
		3:  "EVENT_TYPE_STREAM_LIFECYCLE",
		4:  "EVENT_TYPE_USER_CONNECTION",
		5:  "EVENT_TYPE_PUSH_LIFECYCLE",
		6:  "EVENT_TYPE_RECORDING_LIFECYCLE",
		7:  "EVENT_TYPE_CLIENT_LIFECYCLE",
		8:  "EVENT_TYPE_NODE_LIFECYCLE",
		9:  "EVENT_TYPE_LOAD_BALANCING",
		10: "EVENT_TYPE_TRACK_LIST",
		11: "EVENT_TYPE_STREAM_BUFFER",
		12: "EVENT_TYPE_STREAM_END",
		13: "EVENT_TYPE_BANDWIDTH_THRESHOLD",
	}
	EventType_value = map[string]int32{
		"EVENT_TYPE_UNSPECIFIED":         0,
		"EVENT_TYPE_STREAM_INGEST":       1,
		"EVENT_TYPE_STREAM_VIEW":         2,
		"EVENT_TYPE_STREAM_LIFECYCLE":    3,
		"EVENT_TYPE_USER_CONNECTION":     4,
		"EVENT_TYPE_PUSH_LIFECYCLE":      5,
		"EVENT_TYPE_RECORDING_LIFECYCLE": 6,
		"EVENT_TYPE_CLIENT_LIFECYCLE":    7,
		"EVENT_TYPE_NODE_LIFECYCLE":      8,
		"EVENT_TYPE_LOAD_BALANCING":      9,
		"EVENT_TYPE_TRACK_LIST":          10,
		"EVENT_TYPE_STREAM_BUFFER":       11,
		"EVENT_TYPE_STREAM_END":          12,
		"EVENT_TYPE_BANDWIDTH_THRESHOLD": 13,
	}
)

func (x EventType) Enum() *EventType {
	p := new(EventType)
	*p = x
	return p
}

func (x EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_decklog_proto_enumTypes[0].Descriptor()
}

func (EventType) Type() protoreflect.EnumType {
	return &file_decklog_proto_enumTypes[0]
}

func (x EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventType.Descriptor instead.
func (EventType) EnumDescriptor() ([]byte, []int) {
	return file_decklog_proto_rawDescGZIP(), []int{0}
}

type StreamLifecycleData_State int32

const (
	StreamLifecycleData_STATE_UNSPECIFIED StreamLifecycleData_State = 0
	StreamLifecycleData_STATE_STARTED     StreamLifecycleData_State = 1
	StreamLifecycleData_STATE_ENDED       StreamLifecycleData_State = 2
	StreamLifecycleData_STATE_LIVE        StreamLifecycleData_State = 3
	StreamLifecycleData_STATE_OFFLINE     StreamLifecycleData_State = 4
)

// Enum value maps for StreamLifecycleData_State.
var (
	StreamLifecycleData_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "STATE_STARTED",
		2: "STATE_ENDED",
		3: "STATE_LIVE",
		4: "STATE_OFFLINE",
	}
	StreamLifecycleData_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"STATE_STARTED":     1,
		"STATE_ENDED":       2,
		"STATE_LIVE":        3,
		"STATE_OFFLINE":     4,
	}
)

func (x StreamLifecycleData_State) Enum() *StreamLifecycleData_State {
	p := new(StreamLifecycleData_State)
	*p = x
	return p
}

func (x StreamLifecycleData_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamLifecycleData_State) Descriptor() protoreflect.EnumDescriptor {
	return file_decklog_proto_enumTypes[1].Descriptor()
}

func (StreamLifecycleData_State) Type() protoreflect.EnumType {
	return &file_decklog_proto_enumTypes[1]
}

func (x StreamLifecycleData_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamLifecycleData_State.Descriptor instead.
func (StreamLifecycleData_State) EnumDescriptor() ([]byte, []int) {
	return file_decklog_proto_rawDescGZIP(), []int{4, 0}
}

type UserConnectionData_Action int32

const (
	UserConnectionData_ACTION_UNSPECIFIED UserConnectionData_Action = 0
	UserConnectionData_ACTION_CONNECT     UserConnectionData_Action = 1
	UserConnectionData_ACTION_DISCONNECT  UserConnectionData_Action = 2
)

// Enum value maps for UserConnectionData_Action.
var (
	UserConnectionData_Action_name = map[int32]string{
		0: "ACTION_UNSPECIFIED",
		1: "ACTION_CONNECT",
		2: "ACTION_DISCONNECT",
	}
	UserConnectionData_Action_value = map[string]int32{
		"ACTION_UNSPECIFIED": 0,
		"ACTION_CONNECT":     1,
		"ACTION_DISCONNECT":  2,
	}
)

func (x UserConnectionData_Action) Enum() *UserConnectionData_Action {
	p := new(UserConnectionData_Action)
	*p = x
	return p
}

func (x UserConnectionData_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserConnectionData_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_decklog_proto_enumTypes[2].Descriptor()
}

func (UserConnectionData_Action) Type() protoreflect.EnumType {
	return &file_decklog_proto_enumTypes[2]
}

func (x UserConnectionData_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserConnectionData_Action.Descriptor instead.
func (UserConnectionData_Action) EnumDescriptor() ([]byte, []int) {
	return file_decklog_proto_rawDescGZIP(), []int{5, 0}
}

type Event struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BatchId       string                 `protobuf:"bytes,1,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	Source        string                 `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	TenantId      string                 `protobuf:"bytes,3,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	Events        []*EventData           `protobuf:"bytes,4,rep,name=events,proto3" json:"events,omitempty"`
	Metadata      map[string]string      `protobuf:"bytes,5,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Event) Reset() {
	*x = Event{}
	mi := &file_decklog_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_decklog_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_decklog_proto_rawDescGZIP(), []int{0}
}

func (x *Event) GetBatchId() string {
	if x != nil {
		return x.BatchId
	}
	return ""
}

func (x *Event) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Event) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *Event) GetEvents() []*EventData {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *Event) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Event) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type EventData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EventId       string                 `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	EventType     EventType              `protobuf:"varint,2,opt,name=event_type,json=eventType,proto3,enum=decklog.EventType" json:"event_type,omitempty"`
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Source        string                 `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
	StreamId      *string                `protobuf:"bytes,5,opt,name=stream_id,json=streamId,proto3,oneof" json:"stream_id,omitempty"`
	UserId        *string                `protobuf:"bytes,6,opt,name=user_id,json=userId,proto3,oneof" json:"user_id,omitempty"`
	PlaybackId    *string                `protobuf:"bytes,7,opt,name=playback_id,json=playbackId,proto3,oneof" json:"playback_id,omitempty"`
	InternalName  *string                `protobuf:"bytes,8,opt,name=internal_name,json=internalName,proto3,oneof" json:"internal_name,omitempty"`
	Region        string                 `protobuf:"bytes,9,opt,name=region,proto3" json:"region,omitempty"`
	NodeUrl       *string                `protobuf:"bytes,10,opt,name=node_url,json=nodeUrl,proto3,oneof" json:"node_url,omitempty"`
	SchemaVersion string                 `protobuf:"bytes,12,opt,name=schema_version,json=schemaVersion,proto3" json:"schema_version,omitempty"`
	// Typed event data using oneof for type safety
	//
	// Types that are valid to be assigned to EventData:
	//
	//	*EventData_StreamIngestData
	//	*EventData_StreamViewData
	//	*EventData_StreamLifecycleData
	//	*EventData_UserConnectionData
	//	*EventData_StreamMetricsData
	//	*EventData_NodeMonitoringData
	//	*EventData_LoadBalancingData
	//	*EventData_BandwidthThresholdData
	//	*EventData_ClientLifecycleData
	EventData     isEventData_EventData `protobuf_oneof:"event_data"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventData) Reset() {
	*x = EventData{}
	mi := &file_decklog_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventData) ProtoMessage() {}

func (x *EventData) ProtoReflect() protoreflect.Message {
	mi := &file_decklog_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventData.ProtoReflect.Descriptor instead.
func (*EventData) Descriptor() ([]byte, []int) {
	return file_decklog_proto_rawDescGZIP(), []int{1}
}

func (x *EventData) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *EventData) GetEventType() EventType {
	if x != nil {
		return x.EventType
	}
	return EventType_EVENT_TYPE_UNSPECIFIED
}

func (x *EventData) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *EventData) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *EventData) GetStreamId() string {
	if x != nil && x.StreamId != nil {
		return *x.StreamId
	}
	return ""
}

func (x *EventData) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *EventData) GetPlaybackId() string {
	if x != nil && x.PlaybackId != nil {
		return *x.PlaybackId
	}
	return ""
}

func (x *EventData) GetInternalName() string {
	if x != nil && x.InternalName != nil {
		return *x.InternalName
	}
	return ""
}

func (x *EventData) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *EventData) GetNodeUrl() string {
	if x != nil && x.NodeUrl != nil {
		return *x.NodeUrl
	}
	return ""
}

func (x *EventData) GetSchemaVersion() string {
	if x != nil {
		return x.SchemaVersion
	}
	return ""
}

func (x *EventData) GetEventData() isEventData_EventData {
	if x != nil {
		return x.EventData
	}
	return nil
}

func (x *EventData) GetStreamIngestData() *StreamIngestData {
	if x != nil {
		if x, ok := x.EventData.(*EventData_StreamIngestData); ok {
			return x.StreamIngestData
		}
	}
	return nil
}

func (x *EventData) GetStreamViewData() *StreamViewData {
	if x != nil {
		if x, ok := x.EventData.(*EventData_StreamViewData); ok {
			return x.StreamViewData
		}
	}
	return nil
}

func (x *EventData) GetStreamLifecycleData() *StreamLifecycleData {
	if x != nil {
		if x, ok := x.EventData.(*EventData_StreamLifecycleData); ok {
			return x.StreamLifecycleData
		}
	}
	return nil
}

func (x *EventData) GetUserConnectionData() *UserConnectionData {
	if x != nil {
		if x, ok := x.EventData.(*EventData_UserConnectionData); ok {
			return x.UserConnectionData
		}
	}
	return nil
}

func (x *EventData) GetStreamMetricsData() *StreamMetricsData {
	if x != nil {
		if x, ok := x.EventData.(*EventData_StreamMetricsData); ok {
			return x.StreamMetricsData
		}
	}
	return nil
}

func (x *EventData) GetNodeMonitoringData() *NodeMonitoringData {
	if x != nil {
		if x, ok := x.EventData.(*EventData_NodeMonitoringData); ok {
			return x.NodeMonitoringData
		}
	}
	return nil
}

func (x *EventData) GetLoadBalancingData() *LoadBalancingData {
	if x != nil {
		if x, ok := x.EventData.(*EventData_LoadBalancingData); ok {
			return x.LoadBalancingData
		}
	}
	return nil
}

func (x *EventData) GetBandwidthThresholdData() *BandwidthThresholdData {
	if x != nil {
		if x, ok := x.EventData.(*EventData_BandwidthThresholdData); ok {
			return x.BandwidthThresholdData
		}
	}
	return nil
}

func (x *EventData) GetClientLifecycleData() *ClientLifecycleData {
	if x != nil {
		if x, ok := x.EventData.(*EventData_ClientLifecycleData); ok {
			return x.ClientLifecycleData
		}
	}
	return nil
}

type isEventData_EventData interface {
	isEventData_EventData()
}

type EventData_StreamIngestData struct {
	StreamIngestData *StreamIngestData `protobuf:"bytes,13,opt,name=stream_ingest_data,json=streamIngestData,proto3,oneof"`
}

type EventData_StreamViewData struct {
	StreamViewData *StreamViewData `protobuf:"bytes,14,opt,name=stream_view_data,json=streamViewData,proto3,oneof"`
}

type EventData_StreamLifecycleData struct {
	StreamLifecycleData *StreamLifecycleData `protobuf:"bytes,15,opt,name=stream_lifecycle_data,json=streamLifecycleData,proto3,oneof"`
}

type EventData_UserConnectionData struct {
	UserConnectionData *UserConnectionData `protobuf:"bytes,16,opt,name=user_connection_data,json=userConnectionData,proto3,oneof"`
}

type EventData_StreamMetricsData struct {
	StreamMetricsData *StreamMetricsData `protobuf:"bytes,17,opt,name=stream_metrics_data,json=streamMetricsData,proto3,oneof"`
}

type EventData_NodeMonitoringData struct {
	NodeMonitoringData *NodeMonitoringData `protobuf:"bytes,18,opt,name=node_monitoring_data,json=nodeMonitoringData,proto3,oneof"`
}

type EventData_LoadBalancingData struct {
	LoadBalancingData *LoadBalancingData `protobuf:"bytes,19,opt,name=load_balancing_data,json=loadBalancingData,proto3,oneof"`
}

type EventData_BandwidthThresholdData struct {
	BandwidthThresholdData *BandwidthThresholdData `protobuf:"bytes,20,opt,name=bandwidth_threshold_data,json=bandwidthThresholdData,proto3,oneof"`
}

type EventData_ClientLifecycleData struct {
	ClientLifecycleData *ClientLifecycleData `protobuf:"bytes,21,opt,name=client_lifecycle_data,json=clientLifecycleData,proto3,oneof"`
}

func (*EventData_StreamIngestData) isEventData_EventData() {}

func (*EventData_StreamViewData) isEventData_EventData() {}

func (*EventData_StreamLifecycleData) isEventData_EventData() {}

func (*EventData_UserConnectionData) isEventData_EventData() {}

func (*EventData_StreamMetricsData) isEventData_EventData() {}

func (*EventData_NodeMonitoringData) isEventData_EventData() {}

func (*EventData_LoadBalancingData) isEventData_EventData() {}

func (*EventData_BandwidthThresholdData) isEventData_EventData() {}

func (*EventData_ClientLifecycleData) isEventData_EventData() {}

// Stream ingest specific data
type StreamIngestData struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	StreamKey      string                 `protobuf:"bytes,1,opt,name=stream_key,json=streamKey,proto3" json:"stream_key,omitempty"`
	Protocol       string                 `protobuf:"bytes,2,opt,name=protocol,proto3" json:"protocol,omitempty"`
	IngestUrl      string                 `protobuf:"bytes,3,opt,name=ingest_url,json=ingestUrl,proto3" json:"ingest_url,omitempty"`
	Encoder        *string                `protobuf:"bytes,4,opt,name=encoder,proto3,oneof" json:"encoder,omitempty"`
	StreamSettings *string                `protobuf:"bytes,5,opt,name=stream_settings,json=streamSettings,proto3,oneof" json:"stream_settings,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *StreamIngestData) Reset() {
	*x = StreamIngestData{}
	mi := &file_decklog_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamIngestData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamIngestData) ProtoMessage() {}

func (x *StreamIngestData) ProtoReflect() protoreflect.Message {
	mi := &file_decklog_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamIngestData.ProtoReflect.Descriptor instead.
func (*StreamIngestData) Descriptor() ([]byte, []int) {
	return file_decklog_proto_rawDescGZIP(), []int{2}
}

func (x *StreamIngestData) GetStreamKey() string {
	if x != nil {
		return x.StreamKey
	}
	return ""
}

func (x *StreamIngestData) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *StreamIngestData) GetIngestUrl() string {
	if x != nil {
		return x.IngestUrl
	}
	return ""
}

func (x *StreamIngestData) GetEncoder() string {
	if x != nil && x.Encoder != nil {
		return *x.Encoder
	}
	return ""
}

func (x *StreamIngestData) GetStreamSettings() string {
	if x != nil && x.StreamSettings != nil {
		return *x.StreamSettings
	}
	return ""
}

// Stream view specific data
type StreamViewData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ViewerIp      string                 `protobuf:"bytes,1,opt,name=viewer_ip,json=viewerIp,proto3" json:"viewer_ip,omitempty"`
	UserAgent     string                 `protobuf:"bytes,2,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
	Referrer      *string                `protobuf:"bytes,3,opt,name=referrer,proto3,oneof" json:"referrer,omitempty"`
	PlayerType    *string                `protobuf:"bytes,4,opt,name=player_type,json=playerType,proto3,oneof" json:"player_type,omitempty"`
	PlayerVersion *string                `protobuf:"bytes,5,opt,name=player_version,json=playerVersion,proto3,oneof" json:"player_version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamViewData) Reset() {
	*x = StreamViewData{}
	mi := &file_decklog_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamViewData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamViewData) ProtoMessage() {}

func (x *StreamViewData) ProtoReflect() protoreflect.Message {
	mi := &file_decklog_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamViewData.ProtoReflect.Descriptor instead.
func (*StreamViewData) Descriptor() ([]byte, []int) {
	return file_decklog_proto_rawDescGZIP(), []int{3}
}

func (x *StreamViewData) GetViewerIp() string {
	if x != nil {
		return x.ViewerIp
	}
	return ""
}

func (x *StreamViewData) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *StreamViewData) GetReferrer() string {
	if x != nil && x.Referrer != nil {
		return *x.Referrer
	}
	return ""
}

func (x *StreamViewData) GetPlayerType() string {
	if x != nil && x.PlayerType != nil {
		return *x.PlayerType
	}
	return ""
}

func (x *StreamViewData) GetPlayerVersion() string {
	if x != nil && x.PlayerVersion != nil {
		return *x.PlayerVersion
	}
	return ""
}

// Stream lifecycle specific data
type StreamLifecycleData struct {
	state           protoimpl.MessageState    `protogen:"open.v1"`
	State           StreamLifecycleData_State `protobuf:"varint,1,opt,name=state,proto3,enum=decklog.StreamLifecycleData_State" json:"state,omitempty"`
	Reason          *string                   `protobuf:"bytes,2,opt,name=reason,proto3,oneof" json:"reason,omitempty"`
	DurationSeconds *uint64                   `protobuf:"varint,3,opt,name=duration_seconds,json=durationSeconds,proto3,oneof" json:"duration_seconds,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *StreamLifecycleData) Reset() {
	*x = StreamLifecycleData{}
	mi := &file_decklog_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamLifecycleData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamLifecycleData) ProtoMessage() {}

func (x *StreamLifecycleData) ProtoReflect() protoreflect.Message {
	mi := &file_decklog_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamLifecycleData.ProtoReflect.Descriptor instead.
func (*StreamLifecycleData) Descriptor() ([]byte, []int) {
	return file_decklog_proto_rawDescGZIP(), []int{4}
}

func (x *StreamLifecycleData) GetState() StreamLifecycleData_State {
	if x != nil {
		return x.State
	}
	return StreamLifecycleData_STATE_UNSPECIFIED
}

func (x *StreamLifecycleData) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

func (x *StreamLifecycleData) GetDurationSeconds() uint64 {
	if x != nil && x.DurationSeconds != nil {
		return *x.DurationSeconds
	}
	return 0
}

// User connection specific data
type UserConnectionData struct {
	state              protoimpl.MessageState    `protogen:"open.v1"`
	Action             UserConnectionData_Action `protobuf:"varint,1,opt,name=action,proto3,enum=decklog.UserConnectionData_Action" json:"action,omitempty"`
	DisconnectReason   *string                   `protobuf:"bytes,2,opt,name=disconnect_reason,json=disconnectReason,proto3,oneof" json:"disconnect_reason,omitempty"`
	ConnectionDuration *uint64                   `protobuf:"varint,3,opt,name=connection_duration,json=connectionDuration,proto3,oneof" json:"connection_duration,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *UserConnectionData) Reset() {
	*x = UserConnectionData{}
	mi := &file_decklog_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserConnectionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserConnectionData) ProtoMessage() {}

func (x *UserConnectionData) ProtoReflect() protoreflect.Message {
	mi := &file_decklog_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserConnectionData.ProtoReflect.Descriptor instead.
func (*UserConnectionData) Descriptor() ([]byte, []int) {
	return file_decklog_proto_rawDescGZIP(), []int{5}
}

func (x *UserConnectionData) GetAction() UserConnectionData_Action {
	if x != nil {
		return x.Action
	}
	return UserConnectionData_ACTION_UNSPECIFIED
}

func (x *UserConnectionData) GetDisconnectReason() string {
	if x != nil && x.DisconnectReason != nil {
		return *x.DisconnectReason
	}
	return ""
}

func (x *UserConnectionData) GetConnectionDuration() uint64 {
	if x != nil && x.ConnectionDuration != nil {
		return *x.ConnectionDuration
	}
	return 0
}

// Stream metrics specific data
type StreamMetricsData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BandwidthBps  uint64                 `protobuf:"varint,1,opt,name=bandwidth_bps,json=bandwidthBps,proto3" json:"bandwidth_bps,omitempty"`
	ViewerCount   uint32                 `protobuf:"varint,2,opt,name=viewer_count,json=viewerCount,proto3" json:"viewer_count,omitempty"`
	CpuUsage      *uint32                `protobuf:"varint,3,opt,name=cpu_usage,json=cpuUsage,proto3,oneof" json:"cpu_usage,omitempty"`
	MemoryBytes   *uint64                `protobuf:"varint,4,opt,name=memory_bytes,json=memoryBytes,proto3,oneof" json:"memory_bytes,omitempty"`
	PacketLoss    *float32               `protobuf:"fixed32,5,opt,name=packet_loss,json=packetLoss,proto3,oneof" json:"packet_loss,omitempty"`
	BitrateKbps   *uint32                `protobuf:"varint,6,opt,name=bitrate_kbps,json=bitrateKbps,proto3,oneof" json:"bitrate_kbps,omitempty"`
	Resolution    *string                `protobuf:"bytes,7,opt,name=resolution,proto3,oneof" json:"resolution,omitempty"`
	Fps           *uint32                `protobuf:"varint,8,opt,name=fps,proto3,oneof" json:"fps,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamMetricsData) Reset() {
	*x = StreamMetricsData{}
	mi := &file_decklog_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamMetricsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamMetricsData) ProtoMessage() {}

func (x *StreamMetricsData) ProtoReflect() protoreflect.Message {
	mi := &file_decklog_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamMetricsData.ProtoReflect.Descriptor instead.
func (*StreamMetricsData) Descriptor() ([]byte, []int) {
	return file_decklog_proto_rawDescGZIP(), []int{6}
}

func (x *StreamMetricsData) GetBandwidthBps() uint64 {
	if x != nil {
		return x.BandwidthBps
	}
	return 0
}

func (x *StreamMetricsData) GetViewerCount() uint32 {
	if x != nil {
		return x.ViewerCount
	}
	return 0
}

func (x *StreamMetricsData) GetCpuUsage() uint32 {
	if x != nil && x.CpuUsage != nil {
		return *x.CpuUsage
	}
	return 0
}

func (x *StreamMetricsData) GetMemoryBytes() uint64 {
	if x != nil && x.MemoryBytes != nil {
		return *x.MemoryBytes
	}
	return 0
}

func (x *StreamMetricsData) GetPacketLoss() float32 {
	if x != nil && x.PacketLoss != nil {
		return *x.PacketLoss
	}
	return 0
}

func (x *StreamMetricsData) GetBitrateKbps() uint32 {
	if x != nil && x.BitrateKbps != nil {
		return *x.BitrateKbps
	}
	return 0
}

func (x *StreamMetricsData) GetResolution() string {
	if x != nil && x.Resolution != nil {
		return *x.Resolution
	}
	return ""
}

func (x *StreamMetricsData) GetFps() uint32 {
	if x != nil && x.Fps != nil {
		return *x.Fps
	}
	return 0
}

// Node monitoring specific data
type NodeMonitoringData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CpuLoad       float32                `protobuf:"fixed32,1,opt,name=cpu_load,json=cpuLoad,proto3" json:"cpu_load,omitempty"`
	MemoryUsed    uint64                 `protobuf:"varint,2,opt,name=memory_used,json=memoryUsed,proto3" json:"memory_used,omitempty"`
	MemoryTotal   uint64                 `protobuf:"varint,3,opt,name=memory_total,json=memoryTotal,proto3" json:"memory_total,omitempty"`
	DiskUsed      uint64                 `protobuf:"varint,4,opt,name=disk_used,json=diskUsed,proto3" json:"disk_used,omitempty"`
	DiskTotal     uint64                 `protobuf:"varint,5,opt,name=disk_total,json=diskTotal,proto3" json:"disk_total,omitempty"`
	NetworkInBps  uint64                 `protobuf:"varint,6,opt,name=network_in_bps,json=networkInBps,proto3" json:"network_in_bps,omitempty"`
	NetworkOutBps uint64                 `protobuf:"varint,7,opt,name=network_out_bps,json=networkOutBps,proto3" json:"network_out_bps,omitempty"`
	ActiveStreams uint32                 `protobuf:"varint,8,opt,name=active_streams,json=activeStreams,proto3" json:"active_streams,omitempty"`
	ActiveViewers uint32                 `protobuf:"varint,9,opt,name=active_viewers,json=activeViewers,proto3" json:"active_viewers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NodeMonitoringData) Reset() {
	*x = NodeMonitoringData{}
	mi := &file_decklog_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeMonitoringData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeMonitoringData) ProtoMessage() {}

func (x *NodeMonitoringData) ProtoReflect() protoreflect.Message {
	mi := &file_decklog_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeMonitoringData.ProtoReflect.Descriptor instead.
func (*NodeMonitoringData) Descriptor() ([]byte, []int) {
	return file_decklog_proto_rawDescGZIP(), []int{7}
}

func (x *NodeMonitoringData) GetCpuLoad() float32 {
	if x != nil {
		return x.CpuLoad
	}
	return 0
}

func (x *NodeMonitoringData) GetMemoryUsed() uint64 {
	if x != nil {
		return x.MemoryUsed
	}
	return 0
}

func (x *NodeMonitoringData) GetMemoryTotal() uint64 {
	if x != nil {
		return x.MemoryTotal
	}
	return 0
}

func (x *NodeMonitoringData) GetDiskUsed() uint64 {
	if x != nil {
		return x.DiskUsed
	}
	return 0
}

func (x *NodeMonitoringData) GetDiskTotal() uint64 {
	if x != nil {
		return x.DiskTotal
	}
	return 0
}

func (x *NodeMonitoringData) GetNetworkInBps() uint64 {
	if x != nil {
		return x.NetworkInBps
	}
	return 0
}

func (x *NodeMonitoringData) GetNetworkOutBps() uint64 {
	if x != nil {
		return x.NetworkOutBps
	}
	return 0
}

func (x *NodeMonitoringData) GetActiveStreams() uint32 {
	if x != nil {
		return x.ActiveStreams
	}
	return 0
}

func (x *NodeMonitoringData) GetActiveViewers() uint32 {
	if x != nil {
		return x.ActiveViewers
	}
	return 0
}

// Load balancing specific data
type LoadBalancingData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SelectedNode  string                 `protobuf:"bytes,1,opt,name=selected_node,json=selectedNode,proto3" json:"selected_node,omitempty"`
	Latitude      float64                `protobuf:"fixed64,2,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude     float64                `protobuf:"fixed64,3,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Status        string                 `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	Details       string                 `protobuf:"bytes,5,opt,name=details,proto3" json:"details,omitempty"`
	Score         uint64                 `protobuf:"varint,6,opt,name=score,proto3" json:"score,omitempty"`
	ClientIp      string                 `protobuf:"bytes,7,opt,name=client_ip,json=clientIp,proto3" json:"client_ip,omitempty"`
	ClientCountry string                 `protobuf:"bytes,8,opt,name=client_country,json=clientCountry,proto3" json:"client_country,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LoadBalancingData) Reset() {
	*x = LoadBalancingData{}
	mi := &file_decklog_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoadBalancingData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadBalancingData) ProtoMessage() {}

func (x *LoadBalancingData) ProtoReflect() protoreflect.Message {
	mi := &file_decklog_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadBalancingData.ProtoReflect.Descriptor instead.
func (*LoadBalancingData) Descriptor() ([]byte, []int) {
	return file_decklog_proto_rawDescGZIP(), []int{8}
}

func (x *LoadBalancingData) GetSelectedNode() string {
	if x != nil {
		return x.SelectedNode
	}
	return ""
}

func (x *LoadBalancingData) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *LoadBalancingData) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *LoadBalancingData) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *LoadBalancingData) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

func (x *LoadBalancingData) GetScore() uint64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *LoadBalancingData) GetClientIp() string {
	if x != nil {
		return x.ClientIp
	}
	return ""
}

func (x *LoadBalancingData) GetClientCountry() string {
	if x != nil {
		return x.ClientCountry
	}
	return ""
}

// Client lifecycle specific data
type ClientLifecycleData struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Action          string                 `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	ClientIp        string                 `protobuf:"bytes,2,opt,name=client_ip,json=clientIp,proto3" json:"client_ip,omitempty"`
	ClientCountry   *string                `protobuf:"bytes,3,opt,name=client_country,json=clientCountry,proto3,oneof" json:"client_country,omitempty"`
	ClientCity      *string                `protobuf:"bytes,4,opt,name=client_city,json=clientCity,proto3,oneof" json:"client_city,omitempty"`
	ClientLatitude  *float64               `protobuf:"fixed64,5,opt,name=client_latitude,json=clientLatitude,proto3,oneof" json:"client_latitude,omitempty"`
	ClientLongitude *float64               `protobuf:"fixed64,6,opt,name=client_longitude,json=clientLongitude,proto3,oneof" json:"client_longitude,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ClientLifecycleData) Reset() {
	*x = ClientLifecycleData{}
	mi := &file_decklog_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientLifecycleData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientLifecycleData) ProtoMessage() {}

func (x *ClientLifecycleData) ProtoReflect() protoreflect.Message {
	mi := &file_decklog_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientLifecycleData.ProtoReflect.Descriptor instead.
func (*ClientLifecycleData) Descriptor() ([]byte, []int) {
	return file_decklog_proto_rawDescGZIP(), []int{9}
}

func (x *ClientLifecycleData) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *ClientLifecycleData) GetClientIp() string {
	if x != nil {
		return x.ClientIp
	}
	return ""
}

func (x *ClientLifecycleData) GetClientCountry() string {
	if x != nil && x.ClientCountry != nil {
		return *x.ClientCountry
	}
	return ""
}

func (x *ClientLifecycleData) GetClientCity() string {
	if x != nil && x.ClientCity != nil {
		return *x.ClientCity
	}
	return ""
}

func (x *ClientLifecycleData) GetClientLatitude() float64 {
	if x != nil && x.ClientLatitude != nil {
		return *x.ClientLatitude
	}
	return 0
}

func (x *ClientLifecycleData) GetClientLongitude() float64 {
	if x != nil && x.ClientLongitude != nil {
		return *x.ClientLongitude
	}
	return 0
}

// Bandwidth threshold specific data
type BandwidthThresholdData struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	CurrentBytesPerSec uint64                 `protobuf:"varint,1,opt,name=current_bytes_per_sec,json=currentBytesPerSec,proto3" json:"current_bytes_per_sec,omitempty"`
	ThresholdExceeded  bool                   `protobuf:"varint,2,opt,name=threshold_exceeded,json=thresholdExceeded,proto3" json:"threshold_exceeded,omitempty"`
	ThresholdValue     *uint64                `protobuf:"varint,3,opt,name=threshold_value,json=thresholdValue,proto3,oneof" json:"threshold_value,omitempty"`
	NodeId             *string                `protobuf:"bytes,4,opt,name=node_id,json=nodeId,proto3,oneof" json:"node_id,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *BandwidthThresholdData) Reset() {
	*x = BandwidthThresholdData{}
	mi := &file_decklog_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BandwidthThresholdData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BandwidthThresholdData) ProtoMessage() {}

func (x *BandwidthThresholdData) ProtoReflect() protoreflect.Message {
	mi := &file_decklog_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BandwidthThresholdData.ProtoReflect.Descriptor instead.
func (*BandwidthThresholdData) Descriptor() ([]byte, []int) {
	return file_decklog_proto_rawDescGZIP(), []int{10}
}

func (x *BandwidthThresholdData) GetCurrentBytesPerSec() uint64 {
	if x != nil {
		return x.CurrentBytesPerSec
	}
	return 0
}

func (x *BandwidthThresholdData) GetThresholdExceeded() bool {
	if x != nil {
		return x.ThresholdExceeded
	}
	return false
}

func (x *BandwidthThresholdData) GetThresholdValue() uint64 {
	if x != nil && x.ThresholdValue != nil {
		return *x.ThresholdValue
	}
	return 0
}

func (x *BandwidthThresholdData) GetNodeId() string {
	if x != nil && x.NodeId != nil {
		return *x.NodeId
	}
	return ""
}

type EventResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Status         string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message        string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	ProcessedCount uint32                 `protobuf:"varint,3,opt,name=processed_count,json=processedCount,proto3" json:"processed_count,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *EventResponse) Reset() {
	*x = EventResponse{}
	mi := &file_decklog_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventResponse) ProtoMessage() {}

func (x *EventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_decklog_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventResponse.ProtoReflect.Descriptor instead.
func (*EventResponse) Descriptor() ([]byte, []int) {
	return file_decklog_proto_rawDescGZIP(), []int{11}
}

func (x *EventResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *EventResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *EventResponse) GetProcessedCount() uint32 {
	if x != nil {
		return x.ProcessedCount
	}
	return 0
}

type HealthRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthRequest) Reset() {
	*x = HealthRequest{}
	mi := &file_decklog_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthRequest) ProtoMessage() {}

func (x *HealthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_decklog_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthRequest.ProtoReflect.Descriptor instead.
func (*HealthRequest) Descriptor() ([]byte, []int) {
	return file_decklog_proto_rawDescGZIP(), []int{12}
}

type HealthResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Version       string                 `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthResponse) Reset() {
	*x = HealthResponse{}
	mi := &file_decklog_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthResponse) ProtoMessage() {}

func (x *HealthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_decklog_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthResponse.ProtoReflect.Descriptor instead.
func (*HealthResponse) Descriptor() ([]byte, []int) {
	return file_decklog_proto_rawDescGZIP(), []int{13}
}

func (x *HealthResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *HealthResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *HealthResponse) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

var File_decklog_proto protoreflect.FileDescriptor

const file_decklog_proto_rawDesc = "" +
	"\n" +
	"\rdecklog.proto\x12\adecklog\x1a\x1fgoogle/protobuf/timestamp.proto\"\xb4\x02\n" +
	"\x05Event\x12\x19\n" +
	"\bbatch_id\x18\x01 \x01(\tR\abatchId\x12\x16\n" +
	"\x06source\x18\x02 \x01(\tR\x06source\x12\x1b\n" +
	"\ttenant_id\x18\x03 \x01(\tR\btenantId\x12*\n" +
	"\x06events\x18\x04 \x03(\v2\x12.decklog.EventDataR\x06events\x128\n" +
	"\bmetadata\x18\x05 \x03(\v2\x1c.decklog.Event.MetadataEntryR\bmetadata\x128\n" +
	"\ttimestamp\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xc4\t\n" +
	"\tEventData\x12\x19\n" +
	"\bevent_id\x18\x01 \x01(\tR\aeventId\x121\n" +
	"\n" +
	"event_type\x18\x02 \x01(\x0e2\x12.decklog.EventTypeR\teventType\x128\n" +
	"\ttimestamp\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x12\x16\n" +
	"\x06source\x18\x04 \x01(\tR\x06source\x12 \n" +
	"\tstream_id\x18\x05 \x01(\tH\x01R\bstreamId\x88\x01\x01\x12\x1c\n" +
	"\auser_id\x18\x06 \x01(\tH\x02R\x06userId\x88\x01\x01\x12$\n" +
	"\vplayback_id\x18\a \x01(\tH\x03R\n" +
	"playbackId\x88\x01\x01\x12(\n" +
	"\rinternal_name\x18\b \x01(\tH\x04R\finternalName\x88\x01\x01\x12\x16\n" +
	"\x06region\x18\t \x01(\tR\x06region\x12\x1e\n" +
	"\bnode_url\x18\n" +
	" \x01(\tH\x05R\anodeUrl\x88\x01\x01\x12%\n" +
	"\x0eschema_version\x18\f \x01(\tR\rschemaVersion\x12I\n" +
	"\x12stream_ingest_data\x18\r \x01(\v2\x19.decklog.StreamIngestDataH\x00R\x10streamIngestData\x12C\n" +
	"\x10stream_view_data\x18\x0e \x01(\v2\x17.decklog.StreamViewDataH\x00R\x0estreamViewData\x12R\n" +
	"\x15stream_lifecycle_data\x18\x0f \x01(\v2\x1c.decklog.StreamLifecycleDataH\x00R\x13streamLifecycleData\x12O\n" +
	"\x14user_connection_data\x18\x10 \x01(\v2\x1b.decklog.UserConnectionDataH\x00R\x12userConnectionData\x12L\n" +
	"\x13stream_metrics_data\x18\x11 \x01(\v2\x1a.decklog.StreamMetricsDataH\x00R\x11streamMetricsData\x12O\n" +
	"\x14node_monitoring_data\x18\x12 \x01(\v2\x1b.decklog.NodeMonitoringDataH\x00R\x12nodeMonitoringData\x12L\n" +
	"\x13load_balancing_data\x18\x13 \x01(\v2\x1a.decklog.LoadBalancingDataH\x00R\x11loadBalancingData\x12[\n" +
	"\x18bandwidth_threshold_data\x18\x14 \x01(\v2\x1f.decklog.BandwidthThresholdDataH\x00R\x16bandwidthThresholdData\x12R\n" +
	"\x15client_lifecycle_data\x18\x15 \x01(\v2\x1c.decklog.ClientLifecycleDataH\x00R\x13clientLifecycleDataB\f\n" +
	"\n" +
	"event_dataB\f\n" +
	"\n" +
	"_stream_idB\n" +
	"\n" +
	"\b_user_idB\x0e\n" +
	"\f_playback_idB\x10\n" +
	"\x0e_internal_nameB\v\n" +
	"\t_node_url\"\xd9\x01\n" +
	"\x10StreamIngestData\x12\x1d\n" +
	"\n" +
	"stream_key\x18\x01 \x01(\tR\tstreamKey\x12\x1a\n" +
	"\bprotocol\x18\x02 \x01(\tR\bprotocol\x12\x1d\n" +
	"\n" +
	"ingest_url\x18\x03 \x01(\tR\tingestUrl\x12\x1d\n" +
	"\aencoder\x18\x04 \x01(\tH\x00R\aencoder\x88\x01\x01\x12,\n" +
	"\x0fstream_settings\x18\x05 \x01(\tH\x01R\x0estreamSettings\x88\x01\x01B\n" +
	"\n" +
	"\b_encoderB\x12\n" +
	"\x10_stream_settings\"\xef\x01\n" +
	"\x0eStreamViewData\x12\x1b\n" +
	"\tviewer_ip\x18\x01 \x01(\tR\bviewerIp\x12\x1d\n" +
	"\n" +
	"user_agent\x18\x02 \x01(\tR\tuserAgent\x12\x1f\n" +
	"\breferrer\x18\x03 \x01(\tH\x00R\breferrer\x88\x01\x01\x12$\n" +
	"\vplayer_type\x18\x04 \x01(\tH\x01R\n" +
	"playerType\x88\x01\x01\x12*\n" +
	"\x0eplayer_version\x18\x05 \x01(\tH\x02R\rplayerVersion\x88\x01\x01B\v\n" +
	"\t_referrerB\x0e\n" +
	"\f_player_typeB\x11\n" +
	"\x0f_player_version\"\xa3\x02\n" +
	"\x13StreamLifecycleData\x128\n" +
	"\x05state\x18\x01 \x01(\x0e2\".decklog.StreamLifecycleData.StateR\x05state\x12\x1b\n" +
	"\x06reason\x18\x02 \x01(\tH\x00R\x06reason\x88\x01\x01\x12.\n" +
	"\x10duration_seconds\x18\x03 \x01(\x04H\x01R\x0fdurationSeconds\x88\x01\x01\"e\n" +
	"\x05State\x12\x15\n" +
	"\x11STATE_UNSPECIFIED\x10\x00\x12\x11\n" +
	"\rSTATE_STARTED\x10\x01\x12\x0f\n" +
	"\vSTATE_ENDED\x10\x02\x12\x0e\n" +
	"\n" +
	"STATE_LIVE\x10\x03\x12\x11\n" +
	"\rSTATE_OFFLINE\x10\x04B\t\n" +
	"\a_reasonB\x13\n" +
	"\x11_duration_seconds\"\xb3\x02\n" +
	"\x12UserConnectionData\x12:\n" +
	"\x06action\x18\x01 \x01(\x0e2\".decklog.UserConnectionData.ActionR\x06action\x120\n" +
	"\x11disconnect_reason\x18\x02 \x01(\tH\x00R\x10disconnectReason\x88\x01\x01\x124\n" +
	"\x13connection_duration\x18\x03 \x01(\x04H\x01R\x12connectionDuration\x88\x01\x01\"K\n" +
	"\x06Action\x12\x16\n" +
	"\x12ACTION_UNSPECIFIED\x10\x00\x12\x12\n" +
	"\x0eACTION_CONNECT\x10\x01\x12\x15\n" +
	"\x11ACTION_DISCONNECT\x10\x02B\x14\n" +
	"\x12_disconnect_reasonB\x16\n" +
	"\x14_connection_duration\"\x86\x03\n" +
	"\x11StreamMetricsData\x12#\n" +
	"\rbandwidth_bps\x18\x01 \x01(\x04R\fbandwidthBps\x12!\n" +
	"\fviewer_count\x18\x02 \x01(\rR\vviewerCount\x12 \n" +
	"\tcpu_usage\x18\x03 \x01(\rH\x00R\bcpuUsage\x88\x01\x01\x12&\n" +
	"\fmemory_bytes\x18\x04 \x01(\x04H\x01R\vmemoryBytes\x88\x01\x01\x12$\n" +
	"\vpacket_loss\x18\x05 \x01(\x02H\x02R\n" +
	"packetLoss\x88\x01\x01\x12&\n" +
	"\fbitrate_kbps\x18\x06 \x01(\rH\x03R\vbitrateKbps\x88\x01\x01\x12#\n" +
	"\n" +
	"resolution\x18\a \x01(\tH\x04R\n" +
	"resolution\x88\x01\x01\x12\x15\n" +
	"\x03fps\x18\b \x01(\rH\x05R\x03fps\x88\x01\x01B\f\n" +
	"\n" +
	"_cpu_usageB\x0f\n" +
	"\r_memory_bytesB\x0e\n" +
	"\f_packet_lossB\x0f\n" +
	"\r_bitrate_kbpsB\r\n" +
	"\v_resolutionB\x06\n" +
	"\x04_fps\"\xcb\x02\n" +
	"\x12NodeMonitoringData\x12\x19\n" +
	"\bcpu_load\x18\x01 \x01(\x02R\acpuLoad\x12\x1f\n" +
	"\vmemory_used\x18\x02 \x01(\x04R\n" +
	"memoryUsed\x12!\n" +
	"\fmemory_total\x18\x03 \x01(\x04R\vmemoryTotal\x12\x1b\n" +
	"\tdisk_used\x18\x04 \x01(\x04R\bdiskUsed\x12\x1d\n" +
	"\n" +
	"disk_total\x18\x05 \x01(\x04R\tdiskTotal\x12$\n" +
	"\x0enetwork_in_bps\x18\x06 \x01(\x04R\fnetworkInBps\x12&\n" +
	"\x0fnetwork_out_bps\x18\a \x01(\x04R\rnetworkOutBps\x12%\n" +
	"\x0eactive_streams\x18\b \x01(\rR\ractiveStreams\x12%\n" +
	"\x0eactive_viewers\x18\t \x01(\rR\ractiveViewers\"\xfe\x01\n" +
	"\x11LoadBalancingData\x12#\n" +
	"\rselected_node\x18\x01 \x01(\tR\fselectedNode\x12\x1a\n" +
	"\blatitude\x18\x02 \x01(\x01R\blatitude\x12\x1c\n" +
	"\tlongitude\x18\x03 \x01(\x01R\tlongitude\x12\x16\n" +
	"\x06status\x18\x04 \x01(\tR\x06status\x12\x18\n" +
	"\adetails\x18\x05 \x01(\tR\adetails\x12\x14\n" +
	"\x05score\x18\x06 \x01(\x04R\x05score\x12\x1b\n" +
	"\tclient_ip\x18\a \x01(\tR\bclientIp\x12%\n" +
	"\x0eclient_country\x18\b \x01(\tR\rclientCountry\"\xc6\x02\n" +
	"\x13ClientLifecycleData\x12\x16\n" +
	"\x06action\x18\x01 \x01(\tR\x06action\x12\x1b\n" +
	"\tclient_ip\x18\x02 \x01(\tR\bclientIp\x12*\n" +
	"\x0eclient_country\x18\x03 \x01(\tH\x00R\rclientCountry\x88\x01\x01\x12$\n" +
	"\vclient_city\x18\x04 \x01(\tH\x01R\n" +
	"clientCity\x88\x01\x01\x12,\n" +
	"\x0fclient_latitude\x18\x05 \x01(\x01H\x02R\x0eclientLatitude\x88\x01\x01\x12.\n" +
	"\x10client_longitude\x18\x06 \x01(\x01H\x03R\x0fclientLongitude\x88\x01\x01B\x11\n" +
	"\x0f_client_countryB\x0e\n" +
	"\f_client_cityB\x12\n" +
	"\x10_client_latitudeB\x13\n" +
	"\x11_client_longitude\"\xe6\x01\n" +
	"\x16BandwidthThresholdData\x121\n" +
	"\x15current_bytes_per_sec\x18\x01 \x01(\x04R\x12currentBytesPerSec\x12-\n" +
	"\x12threshold_exceeded\x18\x02 \x01(\bR\x11thresholdExceeded\x12,\n" +
	"\x0fthreshold_value\x18\x03 \x01(\x04H\x00R\x0ethresholdValue\x88\x01\x01\x12\x1c\n" +
	"\anode_id\x18\x04 \x01(\tH\x01R\x06nodeId\x88\x01\x01B\x12\n" +
	"\x10_threshold_valueB\n" +
	"\n" +
	"\b_node_id\"j\n" +
	"\rEventResponse\x12\x16\n" +
	"\x06status\x18\x01 \x01(\tR\x06status\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12'\n" +
	"\x0fprocessed_count\x18\x03 \x01(\rR\x0eprocessedCount\"\x0f\n" +
	"\rHealthRequest\"|\n" +
	"\x0eHealthResponse\x12\x16\n" +
	"\x06status\x18\x01 \x01(\tR\x06status\x12\x18\n" +
	"\aversion\x18\x02 \x01(\tR\aversion\x128\n" +
	"\ttimestamp\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp*\xbc\x03\n" +
	"\tEventType\x12\x1a\n" +
	"\x16EVENT_TYPE_UNSPECIFIED\x10\x00\x12\x1c\n" +
	"\x18EVENT_TYPE_STREAM_INGEST\x10\x01\x12\x1a\n" +
	"\x16EVENT_TYPE_STREAM_VIEW\x10\x02\x12\x1f\n" +
	"\x1bEVENT_TYPE_STREAM_LIFECYCLE\x10\x03\x12\x1e\n" +
	"\x1aEVENT_TYPE_USER_CONNECTION\x10\x04\x12\x1d\n" +
	"\x19EVENT_TYPE_PUSH_LIFECYCLE\x10\x05\x12\"\n" +
	"\x1eEVENT_TYPE_RECORDING_LIFECYCLE\x10\x06\x12\x1f\n" +
	"\x1bEVENT_TYPE_CLIENT_LIFECYCLE\x10\a\x12\x1d\n" +
	"\x19EVENT_TYPE_NODE_LIFECYCLE\x10\b\x12\x1d\n" +
	"\x19EVENT_TYPE_LOAD_BALANCING\x10\t\x12\x19\n" +
	"\x15EVENT_TYPE_TRACK_LIST\x10\n" +
	"\x12\x1c\n" +
	"\x18EVENT_TYPE_STREAM_BUFFER\x10\v\x12\x19\n" +
	"\x15EVENT_TYPE_STREAM_END\x10\f\x12\"\n" +
	"\x1eEVENT_TYPE_BANDWIDTH_THRESHOLD\x10\r2\xc1\x01\n" +
	"\x0eDecklogService\x12:\n" +
	"\fStreamEvents\x12\x0e.decklog.Event\x1a\x16.decklog.EventResponse(\x010\x01\x123\n" +
	"\tSendEvent\x12\x0e.decklog.Event\x1a\x16.decklog.EventResponse\x12>\n" +
	"\vCheckHealth\x12\x16.decklog.HealthRequest\x1a\x17.decklog.HealthResponseB\x1fZ\x1dframeworks/api_firehose/protob\x06proto3"

var (
	file_decklog_proto_rawDescOnce sync.Once
	file_decklog_proto_rawDescData []byte
)

func file_decklog_proto_rawDescGZIP() []byte {
	file_decklog_proto_rawDescOnce.Do(func() {
		file_decklog_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_decklog_proto_rawDesc), len(file_decklog_proto_rawDesc)))
	})
	return file_decklog_proto_rawDescData
}

var file_decklog_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_decklog_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_decklog_proto_goTypes = []any{
	(EventType)(0),                 // 0: decklog.EventType
	(StreamLifecycleData_State)(0), // 1: decklog.StreamLifecycleData.State
	(UserConnectionData_Action)(0), // 2: decklog.UserConnectionData.Action
	(*Event)(nil),                  // 3: decklog.Event
	(*EventData)(nil),              // 4: decklog.EventData
	(*StreamIngestData)(nil),       // 5: decklog.StreamIngestData
	(*StreamViewData)(nil),         // 6: decklog.StreamViewData
	(*StreamLifecycleData)(nil),    // 7: decklog.StreamLifecycleData
	(*UserConnectionData)(nil),     // 8: decklog.UserConnectionData
	(*StreamMetricsData)(nil),      // 9: decklog.StreamMetricsData
	(*NodeMonitoringData)(nil),     // 10: decklog.NodeMonitoringData
	(*LoadBalancingData)(nil),      // 11: decklog.LoadBalancingData
	(*ClientLifecycleData)(nil),    // 12: decklog.ClientLifecycleData
	(*BandwidthThresholdData)(nil), // 13: decklog.BandwidthThresholdData
	(*EventResponse)(nil),          // 14: decklog.EventResponse
	(*HealthRequest)(nil),          // 15: decklog.HealthRequest
	(*HealthResponse)(nil),         // 16: decklog.HealthResponse
	nil,                            // 17: decklog.Event.MetadataEntry
	(*timestamppb.Timestamp)(nil),  // 18: google.protobuf.Timestamp
}
var file_decklog_proto_depIdxs = []int32{
	4,  // 0: decklog.Event.events:type_name -> decklog.EventData
	17, // 1: decklog.Event.metadata:type_name -> decklog.Event.MetadataEntry
	18, // 2: decklog.Event.timestamp:type_name -> google.protobuf.Timestamp
	0,  // 3: decklog.EventData.event_type:type_name -> decklog.EventType
	18, // 4: decklog.EventData.timestamp:type_name -> google.protobuf.Timestamp
	5,  // 5: decklog.EventData.stream_ingest_data:type_name -> decklog.StreamIngestData
	6,  // 6: decklog.EventData.stream_view_data:type_name -> decklog.StreamViewData
	7,  // 7: decklog.EventData.stream_lifecycle_data:type_name -> decklog.StreamLifecycleData
	8,  // 8: decklog.EventData.user_connection_data:type_name -> decklog.UserConnectionData
	9,  // 9: decklog.EventData.stream_metrics_data:type_name -> decklog.StreamMetricsData
	10, // 10: decklog.EventData.node_monitoring_data:type_name -> decklog.NodeMonitoringData
	11, // 11: decklog.EventData.load_balancing_data:type_name -> decklog.LoadBalancingData
	13, // 12: decklog.EventData.bandwidth_threshold_data:type_name -> decklog.BandwidthThresholdData
	12, // 13: decklog.EventData.client_lifecycle_data:type_name -> decklog.ClientLifecycleData
	1,  // 14: decklog.StreamLifecycleData.state:type_name -> decklog.StreamLifecycleData.State
	2,  // 15: decklog.UserConnectionData.action:type_name -> decklog.UserConnectionData.Action
	18, // 16: decklog.HealthResponse.timestamp:type_name -> google.protobuf.Timestamp
	3,  // 17: decklog.DecklogService.StreamEvents:input_type -> decklog.Event
	3,  // 18: decklog.DecklogService.SendEvent:input_type -> decklog.Event
	15, // 19: decklog.DecklogService.CheckHealth:input_type -> decklog.HealthRequest
	14, // 20: decklog.DecklogService.StreamEvents:output_type -> decklog.EventResponse
	14, // 21: decklog.DecklogService.SendEvent:output_type -> decklog.EventResponse
	16, // 22: decklog.DecklogService.CheckHealth:output_type -> decklog.HealthResponse
	20, // [20:23] is the sub-list for method output_type
	17, // [17:20] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_decklog_proto_init() }
func file_decklog_proto_init() {
	if File_decklog_proto != nil {
		return
	}
	file_decklog_proto_msgTypes[1].OneofWrappers = []any{
		(*EventData_StreamIngestData)(nil),
		(*EventData_StreamViewData)(nil),
		(*EventData_StreamLifecycleData)(nil),
		(*EventData_UserConnectionData)(nil),
		(*EventData_StreamMetricsData)(nil),
		(*EventData_NodeMonitoringData)(nil),
		(*EventData_LoadBalancingData)(nil),
		(*EventData_BandwidthThresholdData)(nil),
		(*EventData_ClientLifecycleData)(nil),
	}
	file_decklog_proto_msgTypes[2].OneofWrappers = []any{}
	file_decklog_proto_msgTypes[3].OneofWrappers = []any{}
	file_decklog_proto_msgTypes[4].OneofWrappers = []any{}
	file_decklog_proto_msgTypes[5].OneofWrappers = []any{}
	file_decklog_proto_msgTypes[6].OneofWrappers = []any{}
	file_decklog_proto_msgTypes[9].OneofWrappers = []any{}
	file_decklog_proto_msgTypes[10].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_decklog_proto_rawDesc), len(file_decklog_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_decklog_proto_goTypes,
		DependencyIndexes: file_decklog_proto_depIdxs,
		EnumInfos:         file_decklog_proto_enumTypes,
		MessageInfos:      file_decklog_proto_msgTypes,
	}.Build()
	File_decklog_proto = out.File
	file_decklog_proto_goTypes = nil
	file_decklog_proto_depIdxs = nil
}
